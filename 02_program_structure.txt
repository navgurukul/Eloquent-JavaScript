Chapter 2
Program Structure

Hi! Iss chapter mei hum vaastvik roop se programming ki shuruaat karenge. Pichle chapter mein hum ne javascript ki  kuch simple  commands ko samjha aur chalaya tha, ab iss chapter mei hum usse  bade programs likhenge.

Pehle chapter mein humne “values” ke bare mein padha aur unn par “operators” ka use kar ke basic mathematical operations ki. .  Values create karna javascript me important hai. .
Kisi  code ka ek chhota hisse jisse koi value produce ho  usse hum expression kehte hai.  Values jaise ki “42”, “swades movie”, etc. yeh sab expressions ke examples hai.

Brackets ke beech mein likhe code  ko bhi expression kehte hai. Agar hum do expressions ke beech me ek binary operator lagayein to isse bhi expression kahenge . Aur agar hum unary operator ek expression par lagaye usse bhi. Isse hume language based interface ki sundarta ka pata chalta hai. Javascript ko hum apni human language se compare kar sakte hai.
Jaise shabd, expression ke samaan hai. Aur sentence ek javascript statement ke. Issi tarah ek program bhot saari statements se banta hai.  

Halaki yeh program kaam ke nahi hai. Expression ek content bhi ho sakta hai jo sirf ek value ko produce kare, aur fir yeh value koi expression use kare.  Ek satatement useful tabhi hoti agar wo kuch change kare. Yeh change display par kuch ho sakta hai ya kuch internal change ho sakta hai jo aane wali statement ko change karegi. Inn changes ko “side effects” kehte hai. Uper diye gaye examples me  wo value “1” aur “true” ko produce karta hai, fir haath-on-haath/turant uska result de deta hai. Yeh kisi par koi impression nhi chodta. Kuch bhi aisa nhi hota jisse observe kiya ja sake jab hum program ko execute karte hai. Yeh ek useless program hai jo kuch change nhi kar rahe. 

Kabhi kabhar javascript hume statement ko semicolon ke bina end karne deta hai. Aur kabhi kabhi aisa nhi karne deta. Abhi yeh samjhna mushkil hai ki kab JS semicolon hatana allow karta hai aur kab nhi. Issiliyi abhi ke liye aap apne statements ko semi colon se end karna. Jab tak aap JS ki saari baarikiyan nhi samjhte.

Aapne kabhi aise socha hai ki program internal state ko kaise yaad rakhta hai? aur kaise wo bhut saari cheezo ko yaad rakhta hai? Hume old values se new values produce karna aa gaya hai. Aur hum yeh bina old values change kiye bhi kar sakte hai. Inn new values ko store karne ke liye hum variables ka use karte hai.    
Uper wala example humari agli type ki statement hai.  “var” ek special word hai jo ye batata hai ki ek variable define hone wala hai. Iske baad hum variable ka naam likhte hai. Aur agr aap isse saath-saath value dena chahte hai to “=” operator ka use karte hai.

var caught = 5 * 5; 

Jaise upar humne ek variable banaya jiska naam “caught” hai. Aur issme humne 5*5 ki value(25) ko store kara.
Jab hum variable defined kar dete hai , to uske baad hum iss variable ke naam ko ek expression ki tarah use kar sakte hai. Aur expression ki value, variable ki current value hoti hai. Jaise agar variable ki value 5 hai to expression ki value bhi 5 hogi. Example:
var ten = 10;
console.log(ten * ten);
// → 100

Hum variable ka koi bhi naam rakh sakte hai. Magar, iss baat ka dhyan rakhe ki variable ka naam koi bhi reserved word yaani ki koi bhi word jiska pehle se koi function hai( jaise “var”) nhi ho sakta. Variable ke naam mein spaces nhi aa sakte. Variable ke naam mein digits aa sakti hai jaise “catch22”, magar naam digits se start nhi ho sakta. Ismein “$” aur “_” ke ilawa aur koi special character hum nhi use kar sakte.


Jab hum variable ko ek value assign karte hai to iska yeh matlab nahi hai ki uss variable ki value hamesha wahi rahegi. Hum = operator ka use kar kar ek variable ko jab jarurat pade tab nayi value de sakte hai. Jasie :-

var mood = "light";
console.log(mood);
// → light
mood = "dark";
console.log(mood);
// → dark

Variable ko aap boxes ke alawa  jaal ki tarah samjh sakte hai. variable mei koi value nahi hoti balki yeh value ko samjhata hai -jaise  2 variable same value bhi represent kar sakte hai.program keval variable ki current value par execute hota hai ki uss variable ki abhi value kya hai.jab hume kuch cheeze ya diffrent value  ki jrurat padegi to hum aapne variabe ya jaal ko bada krenge ya fir hum apne existing variable mei koi value attach karenge.
Aap variables ko tentacles yaani kissi animal ke haaton jaisa samajh sakte hai. Variables mein koi value nhi hoti. Yeh bass value ko pakad kar rakhte hai. App ek variable ki value tab tak use kar sakte hai jab tak usne value ko pakad kar rakha hoga. Jab bhi koi value store karni hoti hai, hum usse tentacle se pakad lete hai. Ya koi existing tentacle use kar lete hai.     




Ek example lete hai. Yeh yaad rakhne ke liye ki aapko rahul se kitne paise lene hai, uske liye aap ek variable bana sakte hun. Jab rahul kuch paise de-dega tab aap uss variable ki value change kar sakte hai. 


var rahulUdhar = 200;
rahulUdhar = rahulUdhar- 50;
console.log(rahulUdhar);
// → 150
Agar hum variable define karte time usse koi value nhi dete, tab uske pass kuch pakadne ke liye nhi hota. Agar aap iss empty variable ki value print kroge to value undefined aayegi kyunki humne uss variable ko value nahi di thi.

App neeche example mein dekh sakte hai ki kaise ek “var” statement se hum ek se zada variable define karte hai. Hum variables ke naam ko comma( , ) se separate kar kar likhte hai. aur isse hum commas se alag karte hai.jaise yeh example dekho-- 
var one = 1, two = 2;
console.log(one + two);
// → 3


Har programming language me kuch aise words hote hai jinke sath pehle se ek special meaning juda hua hota hai, jaise ki "var". Aise words ko keywords bolte hai. Inn words ko hum variable ke naam ke liye use nhi kar sakte hai. Aise hi kuch aur words hote hai jinhe reserved words bolte hai. Inn words ko javascript future mein kisi special purpose ke liye use karegi. Issiliye iss tarah ke words ko aap VARIABLE ke naam ki tarah use nahi kar sakte.Jaise:


{
	"break case catch class const continue debugger
	default delete do else enum export extends false
	finally for function if implements import in
	instanceof interface let new null package private
	protected public return static super switch this
	throw true try typeof var void while with yield"
}

Inko yaad karna jaruri nhi hai. 
Kissi bhi time ek program mein variables aur unki values ke collection ko environment kehte hai. Environment kabhi khali nhi hota. Environment mei humesha variable hote hai jo language ke standard system ka part hote hai. Aur isme aise variable bhi hote hai jinse aas-pass ki surroundig se baat ki jaye. Example, browser me kuch aise variable aur functions hote hai jinse hum load hui website se baat kar sakte hai. Aur keyboard aur mouse ki bhi input le sakte hai.


Bhot si default environment ki values function type ki hoti hai. Function 
Environment mein bahut si values function type ki hoti hai. Aap functions ko toffees ki tarah soch sakte hai. Jaise toffee wrapper mein wrapped hoti hai. Ussi tarah functions ka code variables mein wrapped hota hai. Inn variables ka use kar kar hum unke dwara wrap kiye gaye code ko use kar sakte hai. Jaise, alert ek default environment variable hai jo ek function ka code wrapp karta hai. Yeh aise use hota hai,

Yeh aise use hota hai.   

alert("Good morning!");

Functions ko execute karne ko invoking, calling ya applying kehte hai. Hum ek function ko call karne k liye uss expression ke baad brackets lagate hai jo ki function ki value produce kar rha hai. Jyadater aap direct uss variable ka naam use karoge jisme function hai. Jo value brackets ke beech mein likhi jaati hai, wo value function ke andar program ko di jaati hai. Jaise ki, alert function ek string value leta hai aur usse dialog box mein show karta hai. Inn values ko hum arguments bolte hai. Alert function ko sirf ek argument ki jarurt hoti hai. Par dusre functions ek se jyada aur different type ke arguments bhi le sakte hai.


Alert function, apne program ke saath experiment karte hue kuch output karne ke liye use kiya ja sakta hai. Magar baar-baar dialog box par click karna irritating ho sakta hai. Issi Liye hum console.log ka use karte hai. Humne console.log ka use upar wale examples mein bhi kiya hai. Jyadatar systems jahan hum javascript ka code likhte hai, wo console.log ko support karte hai. Yeh function apne arguments ko kissi text output device (jaise, browser console) par likhta hai. Browser mein yeh output console par aati hai. Aap apne browser mein “f12” ya Mac mein Command-Option-I press kar kar console open kar sakte hai. Aur agar yeh nahi kaam karta to, “web console” ya “developer tools” ka option apne browser ki settings mein search kare.  


var x = 30;
console.log("the value of x is", x);
// → the value of x is 30


Haala ki variable k naam me special character nhi ho sakte, lekin “console.log” me hai. Aisa isliye hai kyuki console.log ek simple variable nhi hai. Yeh ek expression hai jo ki console variable se log property nikalta hai. Iske baare mein hum aur Chapter 4 mein padhenge.

Window par dialog box show karna ya screen par text likhna, ek tarha ke side effects hai. Bahut sare functions aapne side effects ki wajah se useful hote hai. Functions values bhi produce kar sakte hai, iss case mai unko useful hone ke liye side effects ki jarurat nhi hai. For example, Math.max function ek se jyada numbers mein se sabse bada number deta hai. 
console.log(Math.max(2, 4));
// → 4


Functions value ko produce kar kar, uss value ko return karte hai. Aur jo bhi cheez koi value produce karti hai usse javascript mein ek expression bolte hai. Iska matlab hum function calls ko bhi expressions mein use kar sakte hai. Jaise humne iss example mein Math.min aur plus operator ko saath mein use kiya hai.
console.log(Math.min(2, 4) + 100);
// → 102

Next chapter mein hum apne functions likhna seekhenge.


prompt and confirm

Browser ke environment mei aur bhut sare function hote hai alert ke alawa jo dialog box display karte hai. Confirm ka use kar kar aap user se question pooch sakte hai. User inka jawab OK ya CANCEL par click kar kar deta hai. Agar user OK click karta hai to Boolean true return hota hai. Aur agar cancel to Boolean false. Jaise,

confirm("Shall we, then?");


Dusra function hai “prompt”. Iska use karke hum user se ek question ka answer puch sakte hai. User ka answer prompt function ek string mein return karta hai. Yeh function 2 arguments leta hai. Pehli argument mein hum question likhte hai. Aur dusri mein hum wo text likhte hai jisse user likhna shuru karega. Jaise,

prompt("Tell me everything you know.", "...");



Control flow

Jab aapke program mei ek se jayada statement hoti hai , tab statements upar se niche ki taraf execute hoti hai. Jaise, iss program mei 2 statements hai. Pehli statement user se ek number input leti hai. Aur dusri statement, jo bad mei execute hogi wo uss number ka square show legi.

var theNumber =Number(prompt("Pick a number", ""));
alert("Your number is the square root of " + theNumber * theNumber);


Upar diye gaye example mein humne user se input lene ke liye prompt function ka use kiya hai. Aur uss value ko output karne ke liye alert ka use kiya hai. 
Humne “number” function ka use “string” value ko number mein convert karne ke liye kiya hai. Aisa isliye kiya hai kyunki prompt function humesha ek string value return karta hai aur square nikalne ke liye hume ek number ki jarurat hai.
Issi tarah “string” aur “boolean” naam ke functions hai jo values ko inn type mein convert karte hai.


Conditional execution

Hum statements ko straight line ke ilawa aur ways mein bhi execute kar sakte hai. Conditional execution ek aisa tareeka hai. Iss mein boolean value “true” ya “false” se aage ka rasta pata chalta hai. Jaise, Agar condition hai :

aapko bhook lagi hai ?
True, to khalo!
False, to mat kaho!

Aise control flow ko hum digaram se aise represent kar sakte hai.


If ( condition ) // agar condition true value degi tab code chalega
	{	    // aur false to nhi
		//code
}
var theNumber =Number(prompt("Pick a number", ""));
alert("Your number is the square root of " +
      theNumber * theNumber);
Jaise hum iss example mei tab hi input ka square compute karenge jab input ek number ho.

Ab agar hum koi string value input karenge jaise “twentyThree”. Tab if ke andar wali condition ka result false ayega. Aur if ke andar likha code nahi chalega.

isNaN function ek standard javascript function hai jo true value tab return karta hai jab given value NaN(not a number) yaani wo value number na ho . Aur false jab value number ho.
Aur agar hum !isNan likhte hai, to yeh true tab return karega jab value number hogi.
Aur, number function  NaN tab return karta hai jab string value mein number na ho. Warna wo string ko number mein convert karta.

var theNumber = Number(prompt("Pick a number", ""));
if (!isNaN(theNumber))
  alert("Your number is the square root of " +
        theNumber * theNumber);
else
  alert("Hey. Why didn't you give me a number?");

Agar humare pass ek se jyada “conditions” hai, to hum multiple yaani ki ek se jyada if/else statements bhi use kar sakte hai. Jaise, 


var num = Number(prompt("Pick a number", "0"));

if (num < 10)
  alert("Small");
else if (num < 100)
  alert("Medium");
else
  alert("Large");
Iss program mei  sabse pehle user se ek nuber input lenge prompt function ka use kar kar. Uske baad hum check karenge ki  kya yeh number 10 se kam hai? iAgar hai to “small” show karo. Aur ye program yahi khatam ho jayega.Agar number 10 kam nahi hai, to program else statement pe jayega. Yahan else statement mei hi second if statement hai.Second condition mei (num<100) ye condition likhi hai. Iska matlab hai ki kya number 10 aur 100 ke bich mei hai? Agar hai to “medium” show kro. Agar inn dono conditions mei se koi bhi condition true nahi ho rahi to last wali else statement execute hogi. Aur wo large show karegi.



Jaise aap ye flow chart ko dekh ke ache se samjh jaoge, ye uppper if/else if/else statement  ko represent karti hai-



while and do loops

Agar aapko ek program likhna hai jo 0 se 12 tak sare even numbers print kare. Ek tarika to yeh hai ki hum her ek even number ko khud print kare. Jaise,  :


console.log(0);
console.log(2);
console.log(4);
console.log(6);
console.log(8);
console.log(10);
console.log(12);

Yeh program kaam to sahi karega. Magar socho, agar aapko 0 se 10000 tak saare even numbers print karne hai? Hum ek-ek number ko khud console.log nhi karenge. Hume koi aisa tarika chahiye jisse yeh kaam hum baar-baar kar sake. Aur jyada lines ka program bhi na likhna pade. Aise control flow ko hum “loop” kehte hai.
Ye kaam to sahi kar rha hai lekin isse likhne liye hume bhut lamba code likhna pad rha hai(ismei ek cheeze bar bar repeat ho rhi hai)  aur agar hume 0 se 12 ke bajay 0 se 10000 tak ke sare even number print karne ho to mujjhe bhut lamba program likhna padega to pehla wala tarika to use nahi karenge.to iske liye hume kuch code ko bar bar repeat karna padega ,iss type ke control flow ko hume loop kahte hai jaise ye diagram dekho: 

Loop, se hum control flow ko program mei kissi point par wapas le ja sakte hai. Aur, firse wahi code chala sakte hai. Jaise, agar aapne ek baar print kiya “hello world”. Hum loop ka use karke baar-baar “hello world” print kara sakte hai. 
Javascript mein loop “teen” ways se use kar sakte hai. “While”, “do while” aur “for” loop. Pehle hum while loop ke baare mei padenge. Example,

var number = 0;
while (number <= 12) {
  console.log(number);
  number = number + 2;
}
// → 0
// → 2
//   … etcetera

Iss example mein humne pehle, number variable ki value zero kar di hai. Fir control flow “while” keyword par aayega aur samajh jayega ki loop start ho gaya hai. Agar while ki condition ka result true aata hai, to iske andar likha code execute hoga. Computer 0<= 12 condition ka result compute karega, jo ki true value dega. Aur while ke andar likha code chal jayega. Pehle number print karega. Firr uski value 2 se badegi, aur control flow dubara upar jaa kar condition ka result nikalega. Iss baar 2<=12 check hoga. Iska result bhi true ayega. Aur firr while ka code chalgea. Issi tarah jab tak number ki value 14 nhi ho jaati tab tak while ka code chalta rahega.

While ke andar ek se jyada statements likhne ke liye hum braces yaani { } ka uske karte hai. Jaise humne upar wale example mein kiya hai. Braces mein likhe lines ko hum “block” kehte hai. Jaise,

{	line1 … 
line2…
line3 …  
} 
Line1 se line3 tak statements ko hum ek “block” bol sakte hai.
Generally, hum ek statement ko bhi braces mein likhte hai. Taaki program banate time confusion na ho. Aur agar hume baad mein while ya if mein agar ek se jyada line likhni pade to braces na add karne pade.


Jaise hum ek example lete hai ,hume ek program likhna hai jo 210  (2 ki power 10) ki value calculate kare.iske liye hume 2 variabl banayenge :jismei se ek hamare result ko represent kare aur dusara number of multiply count kare matlab kitni bar multiply ho rahi hai ye count kare  kyuki hume keval 10 bar hi multiply karna hai.jaise hi second variable ki value 10 ho jayegi tab loop ruk jayega aur dono variable ki value update honi bhi band ho jayegi .

var result = 1;
var counter = 0;
while (counter < 10) {
  result = result * 2;
  counter = counter + 1;
}
console.log(result);
// → 1024
Iss example mein hum counter ki value 1 bhi rakh sakte the. Aur number<10 ki jagah number <= 10 check kar sakte the. Magar humne counter ki value 0 se start kari. Humne aisa kyun kiya? Iska answer aapko chapter 4 mein milega.   

do {
  var Naa = prompt("Aap kaun hai?");
} while (!Naam);
console.log(Naam);

Yeh loop tab tak chalta rahega jab tak user koi “non-empty string” yaani ki aise string jo khaali nhi ho input nhi karta. Aisa isliye kyunki pehle control flow “do” par aayega. Uske baad “prompt” function execute hoga aur user se input lega. Agar user kuch input nhi karta to condition “!Naam” true ho jayegi. Aur control flow wapas upar chala jayega. Magar, agar user kuch input kar deta hai, to yeh condition false ho jayegi. Aur hum loop se bahar aa jayenge. Firr, console.log function se user ka naam console par print ho jayega.




Indenting Code

Aapne, shayad yeh notice kar liya hoga ki mein kuch statements ke shuruaat mein khaali jagah chod deta hun(spaces) aur kuch ke aage nhi. Aisa karna javascript mein jaruri nhi hai. Hum ek line mein bhi pura program likh sakte hai. Magar, aisa karne se program mein galtiyan aur program samjhne mein mushkil hogi. Isliye hum indentation ka use karte hai. Yaani ki hum “code blocks” ke shuruat mein spaces daalte hai. Taaki code debug karna aur padhna easy ho jaye.


Bade aur complex programs mei “nested blocks” yaani ek ke andar ek blocks ho sakte hai. Agar hum blocks ko indent nhi karte, to yeh samjhna ki koi block kahan se shuru hai aur kahan end ho raha hai bhot mushkil ho jata hai. Magar sahi indentation ka use kar kar yeh samjhna aur easy ho jata hai. 
Iss book mein meine indentation ke liye 2 spaces ka use kiya hai. Kai programmers 4 spaces ya “tab” character ka bhi use karte hai.



Apne shayad notice kiya hoga ki statements se phele kuch space diya hua hai. javaScript me space dalna jaruri nhi hota iske bina nhi apka code run ho jaega. Aap javaScript me ek hi line me bhi sara code likh sakte hai. Indention ka use code ko structure dene ke liye hota hai taki bad me aap isko aasani se padh aur samjh sako. Jab code bada aur thoda muskil hota hai to usme smjhna muskil ho sakta hai ki kaha par blocks open hai or kaha par end hai. Ache se identation se aap ko yeh chije smjhne me muskil nhi hogi.



for loops

Jyadatar loops while loop jaisa hi pattern use karte hai. Jaise while loop mein sabse pehle hum ek counter bante hai jo loop ki progress dekhta hai. Uske baad while keyword use karte . Fir isme counter ki value condition se compare hoti hai. Agar condition true hoti hai tab loop ki body chalti hai. Aur agar false, tab body nahi chalti.Loop ki body ke last mei counter variable update kiya jata hai.Yeh pattern itna common hai, isliye javascript hume isse likhne ke liye ek aur tareeka deti hai: For Loop. Jaise,


for (var number = 0; number <= 12; number = number + 2)
  console.log(number);
// → 0
// → 2
//   … etcetera

Yeh example bhi pichle even-number wale example ki tarah hai. Yaha bas ek diffrent hai ki jo bhi statements loop ke state ke related thi ab wo sari ek sath group me hai


For keywords me brackets ke bad me semicolons lagane jaruri hota hai. first semicolon ke aage wala part yeh decide karta hai ki loop kha se start ho raha hai jo generally hum usse variable se defined karte hai.
Aur second part ek expression hota hai jo yeh check karta hai ki loop kha tak chalna chahiye. Aur last part har iteration ke bad loop ki state change hoti hai matlab variable ki value change hoti rahti hai.jaydatar yeh tarika while loop wale tarike se chota aru clear hota hai.
Yha  210 hai ka code likha hai while loop ke bina :


var result = 1;
for (var counter = 0; counter < 10; counter = counter + 1)
   result = result * 2;
console.log(result);
// → 1024
Yha hum for loop ke aage {} brackets nahi laga rahe hai iski jagah hum 2 space diye hue hai isse hume ye janane mei asani hogi ki for loop  kha se start hua hai  ,aisa hum tab karte hai jab hume for loop mei keval ek statement dalni hai {} brackets na lagana matlab for loop mie keval ek statement hai.





Breaking Out of a Loop

Jab loop ki condition false ho jati hai tab hum loop se bahar aa jate hai, jisse loop band ho jata hai. Socho agar aapko loop se bahar aana hai aur wo bhi bina condition ko false kiye to iske liye hum break statement ka use karte hai.loop ke ander break likhne se hum loop se directly jump karke bahar aa jate hai.
Yeh program break statement ke use ko describe karta hai,ki break statement ka use hum kaise karte hai.Ismei hume 20 ya 20 ke bad pehle jo number 7 se divide hote hai wo print karne hai.

for (var current = 20; ; current++) {
  if (current % 7 == 0)
    break;
}
console.log(current);
// → 21
Hum modulus (%) ka use karke asani se yeh pta laga sakte hai ki koi number dusre number se divide ho rha hai ya nahi. Agar unke division ka remainder zero aayega tab wo number dusre se divide ho raha hoga. Jaise uppar wale example mei koi bhi aise part nahi hai jo loop ko finish kare matlab loop mai koi bhi esi condition nhi hai jo false ho, isme tab tak loop stop nahi hoga jab tak hum break statement nahi lagayenge.


Agar apne koi esa program likha hai jisme kabhi bhi condtion false nhi ho rahi hai aur apne break statement bhi nhi lagai to socho kya hoga ?
To apka program infinite ho jayega jiska matlab aapka program kabhi finish nhi hoga chalta rahega, joh ki buri chij hai.


Agar apne iss page ke ek example mei infinite loop chala diya aur bad mei aap usse band karna chahenge to aisa karne ke liye jiss page pe aap kam kar rahe ho wo apko close karna padega. ya fir recover karne ke liye apko pure browser ko hi band karna pad sakta hai.aisa isliye ho raha hai kyuki browser ka har part ek dusre se link hota hai. Jab aap page par infinite loop chalaoge to wo page hang ho jayega kyuki loop ka koi end nahi millega. Jab ek page hang ho gaya to dusre pages automatically hang ho jayenge. Kyuki sare pages aapas mei connected  hote hai.

Jaise break keyword hota hai thik aise hi ek continue keyword hota hai jo loop ki progress ko effect karta hai. Agar hum continue keyword ko loop mei dal de to,tab program loop see bahar aakar ,loop ki next iteration se fir se continue karega.


Updating variables succinctly

Especially when looping, a program often needs to “update” a variable to hold a value based on that variable’s previous value.
Aapne notice kiya hoga ki loop karte time hume variables ki value change karni padti hai. Jaise, 
counter = counter + 1;
Javascript hume aisa karne ke liye ek shortcut deti hai :



counter += 1;

Yeh shortcut aur bhi operators ke saath chalta hai. Jaise,
Counter = counter*2;  // shortcut	counter *= 2;
Counter = counter -1; //shortcut		couner-=1;

Pehle example mei her baar counter ki value double ho rahi. Aur dusre mein hum counter ki value her baar 1 se kam kar rahe hai.


Yeh hume upar wale example ko aur short karne me help karta hai ,
Inn shortcuts ka use karke hum “even numbers” wale example ka code thoda chota kar sakte hai : 
for (var number = 0; number <= 12; number += 2)
  console.log(number);


Javascript mein counter += 1 likhne ka bhi shortcut hota hai. “Counter++”. Issi tarah counter -= 1 ko hum “counter--” likh sakte hai. Generally, counter++ aur counter-- use kiya jata hai.It is common for code to look like this:: counter++ and counter--.



Dispatching on a value with switch 

It is common for code to look like this:Aksar aisa hota hai ki hume variable ki value 3-4 values se compare karni padti hai. Aur fir decision lena hota hai. Aisa karne ke liye hum ek se jyada if/else ka use karte hai.Aur humara code kuch aisa dikhta hai :if (variable == "value1") action1();
else if (variable == "value2") action2();
else if (variable == "value3") action3();
else defaultAction();
Aisa hum “switch” keyword ka use karke bhi kar sakte hai. Jaise,switch( variable ) {
	case “value1”:
		action1();
		break;
	case “value2”:
		action2();
		break;
	case “value3”:
		action3();
		break;
	Default:
		defaultAction();
		Break;
}
Switch ke baad hum jiss variable ki value hume compare karni hai, wo likhte hai. Aur switch ka “block” start karte hai. Jinn bhi values se hum variable ki value compare karna chahte hai, unn values ko hum “case” keyword ke baad likhte hai. Switch ke andar hum kitne bhi “case” bana sakte hai. Hum ek “default” keyword bhi use karte hai. Iska code tab execute hota hai jab variable ki value kissi aur value se match nhi hoti.
Control flow uss case par jata hai jahan variable ki value match hoti hai. Aur uske neeche likhe code ko “break” keyword tak execute karta hai. Jaise hi break aata hai control flow switch block se nikal jata hai. Example,



switch (prompt("What is the weather like?")) {
  case "rainy":
    console.log("Remember to bring an umbrella.");
    break;
  case "sunny":
    console.log("Dress lightly.");
  case "cloudy":
    console.log("Go outside.");
    break;
  default:
    console.log("Unknown weather type!");
    break;
}



switch (prompt("Aaj konsa day hai?")) {
  case "Saturday":
    console.log("Scooter saaf karna hai");
  case "Sunday":
    console.log("Office ki holiday hai");
    break;
  default:
    console.log("Saturday/Sunday nhi hai");
    break;
}

Iss example mein agar user “Saturday” input karega, tab “scooter saaf karna hai” aur “office ki holiday hai” console per print hoga. Aisa isliye hoga kyunki case value match hone ke baad code break statement tak execute hota hai. Isliye case “sunday” ka bhi code execute ho jayega. Aisa karke hum 2 cases, “saturday” aur “sunday” ka code share kar sakte hai. Magar, aise karte hue humesha dhyan rakhe kyunki kabhi-kabhar jo code aap execute karna nhi chahte wo bhi galti se execute ho jayega.


Capitalization

Variable name mei hum space nahi dal sakte jabki bhut sare word ko alag aur clear tarike se padne k liye hum space dalte hai lekin yeh valid nahi hai.aisa karne ke liye aap underscore(“_”)ka use kar sakte hai.jaise yeh example dekho: Generally, agar kissi naam mein ek se jyada words hote hai to hum usse space se separate kar dete hai. Jaise, pankaj kumar. Magar variable ke naam mein spaces nhi aa sakte.
Agar variable ke naam mein ek se jyada word ho to hum usse neeche gaye teen tareekon mein se kissi bhi ek tareeke se likh sakte hai. Jaise,

pankajkumar 	
pura naam without spaces 
pankaj_kumar	
her word ke beech mein underscore
pankajKumar
pehle word small mein, uske baad her word ka pehla                 letter capital
Pehle tareeke se jyada lambe variables ke naam samajh nhi aate. Dusre tareeke mein hume bar-bar underscore use karna padta hai. Aur, teesra tareeka bhaur se javascript programmers aur standard javascript functions use karte hai. Aapko shuruaat mein aise variable ka naam type karne mein problem hogi. Magar, aisa karne se aapko apna code padne mein aasani hogi.



Comments

Aapne notice kiya hogi ki mein bhaut saare examples mein  “do slashes”( // ) use karke text likhta hun. Aisa karne se javascript uss line ko “comment” maanti hai. Comments mein likha koi code ya text execute nhi hota. Agar hum kuch bhi comments mein likhte hai, javascript uss text ko ignore karti hai. Comments ka use karke hum apne code ka meaning aur ache se explain kar sakte hai. Isliye mein bhi apne programs mein comments ka use karta hun.
Javascript mein 2 tareeke se comment kar sakte hai. Pehla, “single line comment” yaani ke “ ek line ka comment”. Agar hum kissi text ki shuruaat mein // likh dete hai. To wo text, single line comment ban jaata hai. Jaise,

var accountBalance = calculateBalance(account);
// It's a green hollow where a river sings
accountBalance.adjust();
// Madly catching white tatters in the grass.
var report = new Report();
// Where the sun on the proud mountain rings:
addToReport(accountBalance, report);
// It's a little valley, foaming like light in a glass.

Aur dusra tarika hai “multi line comment” yaani ke “ek se jyada line ka comment”. Iss tareeke se hum bhut sari line ek sath comment kar sakte hai. Jahan se aapko comment shuru karna hai wahan /* type karo. Aur jahan khatam karna hai wahan */. Multi line comments pure page jitne bhi ho sakte hai. Jaise,


/*
 I first found this number scrawled on the back of one of
 my notebooks a few years ago. Since then, it has often
 dropped by, showing up in phone numbers and the serial
 numbers of products that I've bought. It obviously likes
 me, so I've decided to keep it.
*/
var myNumber = 11213;


Summary

Ab aap yeh jaan gaye hai ki ek program mein bhot saari statements hoti hai, statement mei ek se jyada expression ho sakte hai. Aur, yeh expressions bhi apne jaise chote-chote expressions se bante hai.
Generally, statements upar se neeche ki taraf execute hoti hai. Magar hum iss control flow ko “if, else, switch, while, do while, for aur break” ka use karke change kar sakte hai.


Functions mein code likha hota hai jisse hum function ko call karke use kar sakte hai. Function ko call karne ke liye hum function_ka_naam( argument1, argument2 … ) likhte hai. Function calls expression hoti hai. Aur yeh kabhi-kabhar value bhi return karti hai.





Exercises

If you are unsure how to try your solutions to exercises, refer to the introduction.

Her exercise mein bataya gaya hai ki aapko kya karna hai. Usse ek baar pehle padho aur try karo solve karne ka. Agar, samajh nhi aata ki exercise kaise karni hai, to uske neeche diye gaye hints ko padhe. Exercises ke solution aap iss link par dekh sakte hai. Agar aap sahi mein kuch seekhna chahte ho, to pehle exercise khud solve karna aur fir solution dekhna. Ya tab solution dekhna jab exercise aapko ache se pareshaan kar de.


Looping a triangle

Aisa ek loop likhe jo console.log function ko 7 baar call kare. Aur aisa triangle output kare:
#
##
###
####
#####
######
#######

Hint: Aap ek string ki length yaani ke uss string mein kitne characters hai, uske naam ke aage .length likh kar nikal sakte ho.
var abc = "abc";
console.log(abc.length);
// → 3
Bahut sari exercise mei code ka ek chota sa piece hai jise aap modify karke solve kar sakte hai ,isse aap kisi code ko aasani ye smajh sakte hai .ye yad rakhe ki code block par click karne se aap usmei edit kar sakte hai




JavaScript

Ek program banao jo 1 se 100 tak numbers print kare. Magar, agar number 3 se divisible hai to “java” print hona chaiye. Aur agar number 5 se divisible hai to “script” print hona chahiye. Warna wo number print hona chahiye.
Yeh program banane ke baad, iss program ko change kar kar “JavaScript” print karao agar number 3 aur 5 dono se divisible hai. Dhyan rakhe ki jo kaam program pehle kar raha tha, wo ab bhi hona chahiye. 
( Yeh question bhot se interviews mein pucha gaya hai. Aur kaafi log isse solve nhi kar paate. … ?


Chess board

Ek aisa program likho jo ek string creat kare aur wo string 8*8 grid represent kare matlab 8 8 aisi lines bnani chahiye jo aaps mei intersect ho jaise chess ke box hote hai.aur hume har ek box ki position par hume space ya “#” character likhna hai.To inn character se ek chess board banana chahiye.jab hum inn string value ko console.log mei chla kar dekhe to hume ye output mile--

# # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #
Jab apke pass isss upper wale pattern ko generate karne ka program hoga ,aise hi ek variable size = 8 defined karo aur program tab bhi chlana chahiye jab size ki value kuch bhi ho.