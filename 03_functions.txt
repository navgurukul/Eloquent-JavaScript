Chapter 3
program structure

Functions

{
      Bohut se log yeh sochte hai ki computer science geniuse logo ka kam hai, par reality me esa nhi hai. Jaise bund bund se ghada barta hai wese hi

    Donald Knuth

}

Jaise ki aapne function dekhe hoge jaise ki alert, aur unko call  kaise karte hai. Functions javaScript me bohut important hote hai. Programs ke part ko value me dalkar iske bhot se use kiye ja sakte hai. Yeh bohut acha tarika ka hai kisi bade progaram ko banne ka, or kisi kam ko bar bar karne se bachne ka, aur progarm me apse me jodne ka, aur apas me program ko alag karne ka.  


Human-language apne ap new words banna jadater sahi nhi hota hai, kyu ki ho sakta hai jo word banya hai uska sahi meaning na nikle ya wo galta ho. Par programing language me esa nhi hai isme apko new words banne ki freedom hai, aur yeh jaruri bhi hai.


Jo english speaker ki vocabulary me 20,000 tak words hote hai jo wo use karte hai. Kuch programming languages hai jinme 20,000 tak commands hoti hai. Aur jo vocabulary abhi tend me hai wo theek se define hoti hai, par wo flexible nhi hoti yani uska change kar kr use nhi kiya ja sakta hai. Isliye programing hum khud ke words dal sakte hai taki program me koi koi chij bar bar repeat na ho.


Defining a function

Jaise variable hote hai vaise hi function bhi hote hai ,jaise hum variable ko value dete hai vaise function mei code(value dete hai) likhte  hai fir usko hum as a variable kahi bhi use kar sakte hai. For example,ye niche diya hua code ek square nam ke variable mei ek function dalta hai jismei humne kisi ek number ka square return kiya hai:


var square = function(x) {
  return x * x;
};
`
console.log(square(12));
// → 144

Function ek expression represent karta hai , function defined karne ke liye hum uss expresion ke aage “function” keyword lagate hai.function mei parameters(iss case mei x hai) aur body hoti hai,jisko hum function ko call karte time lete hai aur ismei wo statement hoti hai jo execute honi hoti hai.function ki body ko hum braces mei lete hai fir chahe wo singhle statement ho ya double(jaisa humne pichle example mei dekha tha).
Ek Function mei bahut jayada parameters bhi ho sakte hai aur ek bhi parameter nahi bhi ho sakta  matalab pure function mei kabhi kabhi paramter hoga hi nahi.
 

var makeNoise = function() {
  console.log("Pling!");
};

makeNoise();
// → Pling!

var power = function(base, exponent) {
  var result = 1;
  for (var count = 0; count < exponent; count++)
    result *= base;
  return result;
};

console.log(power(2, 10));
// → 1024

Kuch function aise hote hai jo kuch value produce karte hai jaise yha power aur square function the,aur kuch function koi value produce nahi karte wo keval kuch effect show karta hai jaise yha makeNoise hai.ek return  keyword hume ye batata hai ki function kya value dega.jab program return statement par ayega tab wo current function se bahar nikalkar code se jo output niaklta hoga wo output return kar dega.agar return keyword se pehle koi expression nahi hoti to function ki value undefined hogi.


Parameters and scopes

Functions me parameters regular variables ki tarha hote hai, par unki value function me caller se di jati hai, jo value di jati hai woh function me nhi se bhar hoti hai.
Functions ke ander variables banna ek important property hai, jisme parameters bhi sath me ho, yeh sab function ka hi part hai.  Example ke liye, power funtion me result variable har bar naya banega jab bhi functon ko call kiya jaega. Functions me jo naye naye variables bante hai wo apas me interface nhi karti hai.



Jo variables ki localness hoti hai yeh sirf parameters aur jo variable var word ke sath declare kiya jate hai unn par lagti hi lagti hai functions ke ander. Jo variables functions ke bhar hote hai unko global bolte hai, kyu ki yeh variables pure program me use kar sakte hai. Aur inko hum functions ke ander bhi use kar sakte hai par agar apke functions me same naam ka variable hai to app isse functions me use nhi kar sakte ho.



Jo niche code hai app isme yeh hi dekhoge. X yaha par hamra global variable hai. Jo pehle aur dusre functions dono me call kiya hai, first me var ka use karte hue x variable ko local variable ki tarah use kiya hai. Isliye jab x ko call kiya hai fuction ke bhar to usme koi change nhi hua jai. Dusre me x ko ek local variable ki tarha declare nhi  kiya hai isme x ko goloble varible ki tarah liya hai isliye jab x ki value kari to gobal variabel x ki bhi change ho gai.


var x = "outside";

var f1 = function() {
  var x = "inside f1";
};
f1();
console.log(x);
// → outside

var f2 = function() {
x = "inside f2";
};
f2();
console.log(x);
// → inside f2


Yeh behavior se hum ek jaise naam ke bhi variables bana sakte hai. Agar hum ek naam ka ek hi variable bana pae to hame yeh yad rakhna padega ki iss naam ka variable banya na nhi ya ho sakta ha aap galti se same naam ke ek se jada variable bana do alag alag kam ke liye.  Aur agar aap use variable ko kahi aur use karte to ho sakta hai ki apko uska result kuch aur hi mile jo use related nhi hai. Isliye hum jab function me local variable ko use karte hai to us local variable ko function ke bhar se koi matlb nhi hota wo sirf uss functions ke liye hi hota hai aur baki chijo ke liye nhi. Language uss function ko padhte time sirf us par hi dayan deti hai use bahar se koi matb nhi hota hai.


Nested scope

javaScript sirf local aur global variables me hi fark nhi dekhata. Aap functions ke ander bhi functions bana sakte ho, isse bhot sare local aur global variable ban jaege, kisi ki liye koi local variable hoga kisi ke liye koi. Jaise ki iss example me, function ke ander do aur functions hai.

var landscape = function() {
  var result = "";
  var flat = function(size) {
    for (var count = 0; count < size; count++)
      result += "_";
  };
  var mountain = function(size) {
    result += "/";
    for (var count = 0; count < size; count++)
      result += "'";
    result += "\\";
  };

  flat(3);
  mountain(4);
  flat(6);
  mountain(1);
  flat(1);
  return result;
};



Flat aur mountain funtions, result variable ko use kar sakte hai, kyu ki yeh tino ek hi function ke andar define hai. Par flat or mountain function aapas me ek dusre ke variable use nhi kar sakte hai kyu ki inn dono ko scope alag hai. Landscape ke bhar ka koi bhi function landscape ke andar ka koi bhi variable use nhi kar sakta.


Functions as values

Function variable kisi program ke chote part ke naam ko represent karta hai. humne ek variable defined kar diya aur bad mei usko change nahi kiya to, iss function aur iske nam se aap asaani se cofused ho jayenge.
Lekin function aur uske naam alag hai. Ek function ki value wo sab kar sakti hai jo koi dusri karti hai,aap isse kisi bhi expression mei test kar sakte hai.kisi function ki value ek new place mei store karke usmei argument pass kara kara sakte hai.jaise regular variable kuch store karta hai ,aise ek variable banao jo ek function ko store kare aur usmei new value dale,jaise niche dekho --   
  
var launchMissiles = function(value) {
  missileSystem.launch("now");
};
if (safeMode)
  launchMissiles = function(value) {/* do nothing */};
Aage hum chapter 5 mei iska bahut ache se use karenge,hum waha function ki value function mei dalkar use karnege 



Declaration notation

Variable ko defined karne ka short tarika hai “var square = function…” variable ke nam ke aage “var” lagane se variable defined ho jata hai.function ko defined karne ke liye hum function keyword ka use kar sakte hai jisko hum statement ke aage lagate hai, jaise niche likha hua hai--


function square(x) {
  return x * x;
}
Isse function declaration kahte hai.jaise ye upper wali statement square defined kar rhi hai jisko humne square nam ke variable mei dala hai aur ye variable pure function ki value  ko represent kar rha hai.abhi tak to sab thik hai lekin aisi definition mei mei ek exeption hota hai.jaise niche dekhe-- 


console.log("The future says:", future());

function future() {
  return "We STILL have no flying cars.";
}

Ye code jo uppper likha hai wo chalega iske bawjud function ki value humne code ke niche likhi hai aisa isliye ho rha hai, kyuki function ki declarations lagatar top to bottom flow of control ka part nahi hota ,hum function ki declaration pure program mei kahi bhi likh sakte hai.basically function declaration ka scop uske upper code tak hota ahi aur iska use hum pure scop mei khai bhi kar sakte hai.kabhi kabhi ye useful hota hai kyuki hum isse program ka flow apne tarike se likh sakte hai ,hum code ko apni understanding ke hossab se bhi likh sakte hai jisse kuch meaningful code ban jaye , isse hume har function ke use se pehle use function ko defined nahi karna padega.



Socho agar hum function ka use conditional statement ke sath use kare to kya hoga? Acha hai magar aisa karna mat.iss situation mei javascript ke alag alag platform alag alag cheeze karte hai aur latest standard isse folow nahi karta.
Agar aap apne programs ko lagatar chalana chalate hai to sirf iss tarah ki function-defining statemment ko apne function ke outermost block mei use kare. 

function example() {
  function a() {} // Okay
  if (something) {
    function b() {} // Danger!
  }
}


Optional Arguments

Yeh niche wale code ko dekho yeh aaram se bina kisi problem ke execute ho jayega:

alert("Hello", "Good Evening", "How do you do?");

Officialy ye function keval ek argument accept karta hai.jab aap isko upper wale tarike se call karoge tab koi error to nahi ayegi, bs wo pehle argument ko consider karega aur baki ko ignores kar dega.to iska matlab wo keval “Hello”ka output hi show karega. 


Javascript mei hum jo number argument dete hai,unka hume bahut dhyan rakhna padta hai quki javascript in numbero ko bahut specific tareeke se consider karti hai.agar aapne function mei bahut sare argument de diye to ,javascript unko ignored kar deti hai kaval wo pehle argument ko hi considerd karti hai.Aur agar aapne kuch argument pass nahi kiye to parameter ki value undefined aa jayegi quki aapne us parameter ki value argument mei nahi di.


function power(base, exponent) {
  if (exponent == undefined)
    exponent = 2;
  var result = 1;
  for (var count = 0; count < exponent; count++)
    result *= base;
  return result;
}

console.log(power(4));
// → 16
console.log(power(4, 3));
// → 64
Agle chapter mei hum wo tareeka dekhenge jisse function body argument ki exact list lekar usmei argument pass karayegi.yeh apke liye helpfull hoga quki isse function sare argument ko asani se accept kar leta hai isse apko confusion nahi hogi.for example:--hum isse console.log mei try karke dekhte hai-ye output hai in sabki value di hui hai.


Closure

Function ko hum as a value bhi treat kar sakte hai,isse jab bhi function call kiya jayega tab tab usko new value milti rahegi.To ab socho ki jab function call hota hai to local variable ki value par kya effect hota hai socho.
Jaise niche likhe hue example mei yeh ache se samjhaya hua hai, ismei ek wrap Value nam ka function banaya hai jo ek local variable creats karta hai aur fir yeh function last mei local variable return karta hai.

function wrapValue(n) {
  var localVariable = n;
  return function() { return localVariable; };
}

var wrap1 = wrapValue(1);
var wrap2 = wrapValue(2);
console.log(wrap1());
// → 1
console.log(wrap2());
// → 2
Jaisa apne socha tha teek vaise hi hua. Variable ke multiple example ek sath ek time par live ho sakte hai , jo ek local variable ke concept ko samjne ka ek acha examle ki local variable har call par recreate hote hai, different call se inn local variable par koi fark nhi padta.





